name: Release
on:
  workflow_dispatch:
    inputs:
      semver-type:
        description: 'Can be one of [major,minor,patch]. CAUTION: This will enforce a new release with the specified semantic version type bumped.'
        required: false
defaults:
  run:
    shell: bash
jobs:
  prepare:
    name: Prepare release run
    runs-on: ubuntu-latest
    outputs:
      next-version: ${{ steps.version_number.outputs.next-version }}
    steps:
      - name: Check SemVer input
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            echo "SemVer Type is defined. Checking for valid SemVer type..."
            if [[ "$SEMVER_TYPE" == "major" ]] || [[ "$SEMVER_TYPE" == "minor" ]] || [[ "$SEMVER_TYPE" == "patch" ]]; then
              echo "::notice::SemVer Type is correctly set to $SEMVER_TYPE! Continuing with this version bump..."
            else
              echo "::error::ERROR: Enforced SemVer does not match any of [major,minor,patch]!"
              echo "Exiting..."
              exit 1
            fi
          else
            echo "::notice::No SemVer type defined, continuing with auto generated version number..."
          fi
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Find next version number
        id: version_number
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.1 \
              --skip.commit \
              --skip.tag \
              --skip.changelog \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.1 \
              --skip.commit \
              --skip.tag \
              --skip.changelog
          fi
          NEXT_VERSION=$(cat VERSION.txt)
          echo "::set-output name=next-version::${NEXT_VERSION}"
          git checkout HEAD -- VERSION.txt

  ############################################################################
  # Build Docker Images
  ############################################################################
  docker_build:
    needs: prepare
    name: Docker Build
    runs-on: ubuntu-latest
    env:
      BRANCH: "master"
      VERSION: ${{ needs.prepare.outputs.next-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - id: docker_build_image
        name: "Docker Build striessnigk/willneverbefinishedbot"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: |
            striessnigk/willneverbefinishedbot:${{ env.VERSION }}
          build-args: |
            version=${{ env.VERSION }}
          push: true
          pull: true

  ############################################################################
  # Release
  ############################################################################
  release:
    name: "Release"
    runs-on: ubuntu-latest
    needs: [prepare, docker_build]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        with:
          tag_name: $RELEASE_TAG
          release_name: $RELEASE_TAG
          draft: true
          prerelease: false